name: 'Continuous Integration'

on: 
  # Execute testing on push to development, main, and release branches
  push:
    branches: ["main", "develop", "release/*", "feature/*"]
  # Execute when pulling to main
  pull_request:
    branches: ["main"]

env:
  PROJECT_ID: '${{ secrets.PROJECT_ID }}'
  GAR_LOCATION: '${{ secrets.GAR_LOCATION }}'
  SERVICE: '${{ secrets.SERVICE }}'
  REGION: '${{ secrets.REGION }}'

jobs:
  # Test model and api
  test:
    runs-on: ubuntu-latest
    steps:
      # Use ptyhon 3.12
      - uses: actions/checkout@v4
      - name: Python set up
        uses: actions/checkout@v4
        with: 
          python-version: '3.12'
      # Create and activate venv for testing
      - name: venv
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          python3
          import os
          print(os.getcwd())
          exit()
      # Install requirements for running and testing
      - name: install dependencies
        run: |
          pip install --no-cache-dir --upgrade -r requirements.txt
          pip install --no-cache-dir --upgrade -r requirements-test.txt
      # Test model
      - name: test model
        run: make model-test
      # Test api and close venv
      - name: test api
        run: |
          make api-test
          source .venv/bin/deactivate
  
  # Build test on Google Cloud Run
  build:
    permissions:
      contents: 'read'
      id-token: 'write'
    
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com
      
      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)
      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}' # take access token from the ouput of auth step
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
      
      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}"
      # END - Docker auth and build
      